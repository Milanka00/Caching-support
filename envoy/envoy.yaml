static_resources:
  listeners:
    - name: listener_0
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 10000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: backend
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/" }
                          route:
                            cluster: backend_cluster
                            timeout: 0s
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        function envoy_on_request(request_handle)
                          if request_handle:headers():get(":path") == "/getresponse" then
                            request_handle:headers():replace("host", "backend")
                            
                          elseif request_handle:headers():get(":path") == "/getsecondresponse" then
                            request_handle:headers():replace("host", "second_backend")
                           
                          end
                        end
                  - name: envoy.filters.http.router
                  
# lua filters are alternative way of manipulating HTTP headers
  # clusters:
  #   - name: backend
  #     connect_timeout: 0.25s
  #     type: static
  #     lb_policy: round_robin
  #     load_assignment:
  #       cluster_name: backend
  #       endpoints:
  #         - lb_endpoints:
  #             - endpoint:
  #                 address:
  #                   socket_address:
  #                     address: 172.17.0.1
  #                     port_value: 8081
  clusters:
    - name: backend_cluster
      connect_timeout: 0.25s
      type: STRICT_DNS
      lb_policy: round_robin
      load_assignment:
        cluster_name: backend_cluster
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: varnish
                      port_value: 80
